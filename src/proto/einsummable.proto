syntax = "proto2";

package es_proto;

message EsInn {
  repeated int32 idxs = 1;
}

message Einsummable {
  repeated uint64 join_shape = 1;
  repeated EsInn inns = 2;
  required int32 out_rank = 3;
  required string join = 4;
  optional string castable = 5;
}

message EinsummableList {
  repeated Einsummable es = 1;
}

message TouchDim {
  required uint64 d_inn = 1;
  required uint64 d_out = 2;
  required uint64 offset_inn = 3;
  required uint64 offset_out = 4;
  required uint64 size = 5;
}

message Touch {
  repeated TouchDim selection = 1;
  optional string castable = 2;
  required string dtype = 3;
}

message Fill {
  required string value = 1;
  repeated uint64 shape = 2;
}

message TGInput {
  required int32 loc = 1;
  required uint64 size = 2;
}
message TGApply {
  required int32 loc = 1;
  repeated int32 inns = 2;
  required Einsummable einsummable = 3;
}
message TGMove {
  required int32 src = 1;
  required int32 dst = 2;
  required int32 inn = 3;
  required uint64 size = 4;
}
message TGConstant {
  required int32 loc = 1;
  required Fill fill = 2;
}

message InnRegionDim {
  required uint64 dim = 1;
  required uint64 offset = 2;
}
message OutRegionDim {
  required uint64 offset = 1;
  required uint64 size = 2;
}

message TGPartialInn {
  required int32 id = 1;
  required bool consumable = 2;
  repeated InnRegionDim region = 3;
}
message TGPartialUnit {
  optional string castable = 1;
  repeated OutRegionDim out_region = 2;
  repeated TGPartialInn inputs = 3;
}
message TGPartialize {
  required int32 loc = 1;
  required string dtype = 2;
  repeated uint64 write_shape = 3;
  repeated TGPartialUnit units = 4;
}

message TaskGraphNode {
  oneof node {
    TGInput input = 1;
    TGApply apply = 2;
    TGMove move = 3;
    TGConstant constant = 4;
    TGPartialize partialize = 5;
  }
  required bool is_save = 6;
}

message TaskGraph {
  repeated TaskGraphNode nodes = 1;
}

message Partdim {
  repeated uint64 spans = 1;
}

message Partition {
  repeated Partdim partdims = 1;
}

message Placement {
  required Partition partition = 1;
  repeated int32 locations = 2;
}

message Relation {
  required string dtype = 1;
  required Placement placement = 2;
  repeated int32 tids = 4;
}

message RemapRelations {
  repeated Relation srcs = 1;
  repeated Relation dsts = 2;
}

message MGInputMem {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGInputSto {
  required int32 loc = 1;
  required int32 storage_loc = 2;
  required int32 storage_id = 3;
  required uint64 size = 4;
}

message MGConstant {
  required int32 loc = 1;
  required uint64 offset = 2;
  required Fill fill = 3;
}

message MGApply {
  required int32 loc = 1;
  repeated uint64 mems_offset = 2;
  repeated uint64 mems_size = 3;
  oneof op {
    Einsummable einsummable = 4;
    Touch touch = 5;
  }
  required int32 group = 6;
}

message MGMove {
  required int32 src_loc = 1;
  required uint64 src_offset = 2;
  required int32 dst_loc = 3;
  required uint64 dst_offset = 4;
  required uint64 size = 5;
}

message MGEvict {
  required int32 storage_loc = 1;
  required int32 storage_id = 2;
  required int32 loc = 3;
  required uint64 offset = 4;
  required uint64 size = 5;
}

message MGLoad {
  required int32 storage_loc = 1;
  required int32 storage_id = 2;
  required int32 loc = 3;
  required uint64 offset = 4;
  required uint64 size = 5;
}

message MGPartialize {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGAlloc {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGDel {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MemGraphNode {
  oneof node {
    MGInputMem inputmem = 1;
    MGInputSto inputsto = 2;
    MGConstant constant = 3;
    MGApply apply = 4;
    MGMove move = 5;
    MGEvict evict = 6;
    MGLoad load = 7;
    MGPartialize partialize = 8;
    MGAlloc alloc = 9;
    MGDel del = 10;
  }
  repeated int32 inns = 11;
}

message MemGraph {
  required int32 num_compute_locs = 1;
  required int32 num_storage_locs = 2;
  repeated int32 storage_locs = 3;
  repeated MemGraphNode nodes = 4;
}
