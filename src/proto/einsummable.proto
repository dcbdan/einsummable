syntax = "proto2";

package es_proto;

message EsInn {
  repeated int32 idxs = 1;
}

message Einsummable {
  repeated uint64 join_shape = 1;
  repeated EsInn inns = 2;
  required int32 out_rank = 3;
  required string join = 4;
  optional string castable = 5;
}

message EinsummableList {
  repeated Einsummable es = 1;
}

message TouchDim {
  required uint64 d_inn = 1;
  required uint64 d_out = 2;
  required uint64 offset_inn = 3;
  required uint64 offset_out = 4;
  required uint64 size = 5;
}

message Touch {
  repeated TouchDim selection = 1;
  optional string castable = 2;
  required string dtype = 3;
}

message Constant {
  required string value = 1;
  repeated uint64 shape = 2;
}
message Lowertri {
  required string lower = 1;
  required string upper = 2;
  required uint64 ncol = 3;
  required uint64 nrow = 4;
  required int64 start = 5;
}
message Fill {
  oneof op {
    Constant constant = 1;
    Lowertri lowertri = 2;
  }
}

message TGInput {
  required int32 loc = 1;
  required uint64 size = 2;
}
message TGApply {
  required int32 loc = 1;
  repeated int32 inns = 2;
  required Einsummable einsummable = 3;
}
message TGMove {
  required int32 src = 1;
  required int32 dst = 2;
  required int32 inn = 3;
  required uint64 size = 4;
}
message TGConstant {
  required int32 loc = 1;
  required Fill fill = 2;
}

message InnRegionDim {
  required uint64 dim = 1;
  required uint64 offset = 2;
}
message OutRegionDim {
  required uint64 offset = 1;
  required uint64 size = 2;
}

message TGPartialInn {
  required int32 id = 1;
  required bool consumable = 2;
  repeated InnRegionDim region = 3;
}
message TGPartialUnit {
  optional string castable = 1;
  repeated OutRegionDim out_region = 2;
  repeated TGPartialInn inputs = 3;
}
message TGPartialize {
  required int32 loc = 1;
  required string dtype = 2;
  repeated uint64 write_shape = 3;
  repeated TGPartialUnit units = 4;
}

message TaskGraphNode {
  oneof node {
    TGInput input = 1;
    TGApply apply = 2;
    TGMove move = 3;
    TGConstant constant = 4;
    TGPartialize partialize = 5;
  }
  required bool is_save = 6;
  required int32 barrier = 7;
}

message TaskGraph {
  repeated TaskGraphNode nodes = 1;
}

message Partdim {
  repeated uint64 spans = 1;
}

message PartitionList {
  repeated Partition parts = 1;
}

message Partition {
  repeated Partdim partdims = 1;
}

message PlacementList {
  repeated Placement pls = 1;
}

message Placement {
  required Partition partition = 1;
  repeated int32 locations = 2;
}

message Relation {
  required string dtype = 1;
  required Placement placement = 2;
  repeated int32 tids = 4;
}

message RemapRelations {
  repeated Relation srcs = 1;
  repeated Relation dsts = 2;
}

message MGInputMem {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGInputSto {
  required int32 storage_loc = 1;
  required int32 storage_id = 2;
  required uint64 size = 3;
}

message MGConstant {
  required int32 loc = 1;
  required uint64 offset = 2;
  required Fill fill = 3;
}

message MGApply {
  required int32 loc = 1;
  repeated uint64 mems_offset = 2;
  repeated uint64 mems_size = 3;
  oneof op {
    Einsummable einsummable = 4;
    Touch touch = 5;
  }
  required int32 group = 6;
}

message MGMove {
  required int32 src_loc = 1;
  required uint64 src_offset = 2;
  required int32 dst_loc = 3;
  required uint64 dst_offset = 4;
  required uint64 size = 5;
}

message MGEvict {
  required int32 storage_loc = 1;
  required int32 storage_id = 2;
  required int32 loc = 3;
  required uint64 offset = 4;
  required uint64 size = 5;
}

message MGLoad {
  required int32 storage_loc = 1;
  required int32 storage_id = 2;
  required int32 loc = 3;
  required uint64 offset = 4;
  required uint64 size = 5;
}

message MGPartialize {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGAlloc {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}

message MGDel {
  required int32 loc = 1;
  required uint64 offset = 2;
  required uint64 size = 3;
}
message MGBarrier {
  required int32 x = 1;
}

message MemGraphNode {
  oneof node {
    MGInputMem inputmem = 1;
    MGInputSto inputsto = 2;
    MGConstant constant = 3;
    MGApply apply = 4;
    MGMove move = 5;
    MGEvict evict = 6;
    MGLoad load = 7;
    MGPartialize partialize = 8;
    MGAlloc alloc = 9;
    MGDel del = 10;
    MGBarrier barrier = 11;
  }
  repeated int32 inns = 12;
}

message MemGraph {
  required int32 num_compute_locs = 1;
  required int32 num_storage_locs = 2;
  repeated int32 storage_locs = 3;
  repeated MemGraphNode nodes = 4;
}

message Mem {
  required uint64 offset = 1;
  required uint64 size = 2;
}

message MemLoc {
  required uint64 offset = 1;
  required uint64 size = 2;
  required int32 loc = 3;
}

message IEInit {
  required int32 world_size = 1;
  required uint64 mem_size = 2;
  required int32 num_threads = 3;
  required int32 num_files = 4;
  required uint64 batch_size = 5;
  required uint64 seq_len = 6;
};

message IECloseReaders {
  required int32 dummy = 1;
}

message IELoadWeight {
  required string name = 1;
  repeated MemLoc data_locs = 2;
}

message IELoadDataMatrix {
  required uint64 batch_size = 1;
  required uint64 seq_len = 2;
  required uint64 d_embed = 3;
  required Mem mem = 4;
}

message IELoadMask {
  required uint64 seq_len = 1;
  required Mem mem = 2;
}

message IELoadFreqsCis {
  required uint64 dim = 1;
  required uint64 heads = 2;
  required uint64 max_seq_len = 3;
  required Mem mem = 4;
}

message IEExecute {
  required string msg = 1;
  required MemGraph memgraph = 2;
}

message IEBuildNext {
  required Partition src_part = 1;
  repeated MemLoc src_data_locs = 2;
  required Partition dst_part = 3;
  repeated MemLoc dst_data_locs = 4;
}

message IERandom {
  repeated MemLoc mems = 1;
}

message InferenceEvent {
  oneof op {
    IEInit init = 1;
    IECloseReaders close_readers = 2;
    IELoadWeight load_weight = 3;
    IELoadDataMatrix load_data_matrix = 4;
    IELoadMask load_mask = 5;
    IELoadFreqsCis load_freqs_cis = 6;
    IEExecute execute = 7;
    IEBuildNext build_next = 8;
    IERandom random = 9;
  }
}

message InferenceEvents {
  repeated InferenceEvent event = 1;
}
